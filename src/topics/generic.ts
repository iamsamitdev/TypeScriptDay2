export const generic = () => {

  // 1. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Generic ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
  function identity<T>(arg: T): T {
    return arg
  }

  // T ‡πÄ‡∏õ‡πá‡∏ô Generic Type Parameter ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
  //  ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô identity<number>(10) ‚Üí TypeScript ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤ T = number

  //   console.log(identity<number>(10)) // 10
  //   console.log(identity<string>("Hello")) // 'Hello'

  // 2. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Arrays ‡πÅ‡∏•‡∏∞ Objects
  function getFirstElement<T>(arr: T[]): T {
    return arr[0]
  }

  // T[] ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "Array ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó T"

  //   console.log(getFirstElement<string>(['apple', 'banana', 'cherry'])) // 'apple'
  //   console.log(getFirstElement<number>([10, 20, 30])) // 10

  // 3. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Interface
  interface Box<T> {
    value: T
  }

  const numberBox: Box<number> = { value: 100 }
  const stringBox: Box<string> = { value: "TypeScript" }

  //   console.log(numberBox.value) // 100
  //   console.log(stringBox.value) // 'TypeScript'

  // üìå ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Generic Type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Interface ‡πÑ‡∏î‡πâ

  // 4. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Class

  class DataStore<T> {
    private data: T[] = []

    addItem(item: T): void {
      this.data.push(item)
    }

    getItems(): T[] {
      return this.data
    }
  }

  // üìå ‡πÉ‡∏ä‡πâ Generic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Class ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

  const numberStore = new DataStore<number>()
  numberStore.addItem(5)
  numberStore.addItem(10)
  //   console.log(numberStore.getItems()) // [5, 10]

  const stringStore = new DataStore<string>()
  stringStore.addItem("TypeScript")
  //   console.log(stringStore.getItems()) // ['TypeScript']

  // 5. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Constraints
  // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ extends ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ Generic ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
  function printName<T extends { name: string }>(obj: T): void {
    console.log(`Hello, ${obj.name}`)
  }

  // üìå T extends { name: string } ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ T ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ property name

  //   printName({ name: 'John' }) // ‚úÖ Hello, John
  //   printName({ name: 'Alice', age: 30 }) // ‚úÖ Hello, Alice
  // printName({ age: 25 }) // ‚ùå Error: Property 'name' is missing

  // 6. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Multiple Types

  function combine<T, U>(a: T, b: U): [T, U] {
    return [a, b]
  }

  // üìå ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 Generic Type Parameter ‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô <T, U>

  //   console.log(combine<string, number>('Hello', 100)) // ['Hello', 100]
  //   console.log(combine<boolean, string>(true, 'World')) // [true, 'World']

  //  7. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Default Type
  function createArray<T = string>(length: number, value: T): T[] {
    return new Array(length).fill(value)
  }

  // üìå T = string ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ T ‡∏à‡∏∞‡πÉ‡∏ä‡πâ string ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default

  //   console.log(createArray(3, 'Hello')) // ['Hello', 'Hello', 'Hello']
  //   console.log(createArray<number>(3, 5)) // [5, 5, 5]

  // 8. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Utility Types
  // TypeScript ‡∏°‡∏µ Utility Types ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Generic ‡πÄ‡∏ä‡πà‡∏ô:
  // Partial<T>: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å property ‡πÉ‡∏ô T ‡πÄ‡∏õ‡πá‡∏ô optional
  // Readonly<T>: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å property ‡πÉ‡∏ô T ‡πÄ‡∏õ‡πá‡∏ô readonly
  // Record<K, T>: ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà key ‡πÄ‡∏õ‡πá‡∏ô K ‡πÅ‡∏•‡∏∞ value ‡πÄ‡∏õ‡πá‡∏ô T

  interface User {
    id: number
    name: string
    email: string
  }

  // Partial ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å property ‡πÄ‡∏õ‡πá‡∏ô optional
  const updateUser = (user: Partial<User>) => {
    console.log(user)
  }
  //   updateUser({ name: "John" }) // ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡∏´‡∏£‡∏∑‡∏≠ email

  // Readonly ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  const user: Readonly<User> = {
    id: 1,
    name: "Alice",
    email: "alice@example.com",
  }
  // user.name = 'Bob' // ‚ùå Error

  // Record ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ value ‡πÄ‡∏õ‡πá‡∏ô User
  const userMap: Record<string, User> = {
    user1: { id: 1, name: "John", email: "john@example.com" },
    user2: { id: 2, name: "Jane", email: "jane@example.com" },
  }

  //   console.log(userMap)

  // 9. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Function Overload
  function merge<T, U>(a: T, b: U): T & U {
    return { ...a, ...b }
  }

  // üìå ‡πÉ‡∏ä‡πâ T & U ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° object ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô

  const person = merge({ name: "John" }, { age: 30 })
  //   console.log(person) // { name: 'John', age: 30 }

  //   10. ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö React / Vue / Angular

  interface ButtonProps<T> {
    label: string
    action: (value: T) => void
  }

  // üìå <T,> (‡∏°‡∏µ , ‡∏´‡∏•‡∏±‡∏á T) ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏Å‡∏±‡∏ö JSX

  //   const Button = <T>({ label, action }: ButtonProps<T>) => {
  //     return <button onClick={() => action({} as T)}>{label}</button>
  //   }

  // Vue: ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Composition API
  // import { ref } from 'vue'

  // function useState<T>(initialValue: T) {
  //   const state = ref<T>(initialValue)
  //   return state
  // }

  // const count = useState<number>(0)

  // Angular: ‡πÉ‡∏ä‡πâ Generic ‡∏Å‡∏±‡∏ö Service
  // @Injectable({
  //     providedIn: 'root'
  //   })
  //   export class ApiService<T> {
  //     constructor(private http: HttpClient) {}

  //     getData(url: string): Observable<T> {
  //       return this.http.get<T>(url)
  //     }
  //   }

  // üìå ‡∏™‡∏£‡∏∏‡∏õ
  // ‚úÖ Generic ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î Reusable ‡πÅ‡∏•‡∏∞ Type-Safe
  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö Function, Interface, Class ‡πÅ‡∏•‡∏∞ Utility Types
  // ‚úÖ ‡πÉ‡∏ä‡πâ extends ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Generic
  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö Framework ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô React, Vue, Angular

  //   ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Generic (T) vs any vs unknown ‡πÉ‡∏ô TypeScript
  // 1Ô∏è‚É£ Generic (T) ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
  // ‡∏°‡∏µ Type Safety ‚Üí ‡∏£‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô
  // ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ (Reusable) ‚Üí ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ any
  // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î (extends) ‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ T ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ property ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á

  //   ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Generic
  function identities<T>(arg: T): T {
    return arg
  }

  //   console.log(identities<number>(10)) // ‚úÖ 10
  //   console.log(identities<string>("Hello")) // ‚úÖ 'Hello'

  //   üìå ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
  // T ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ identity(10) ‚Üí T = number ‡πÅ‡∏•‡∏∞ identity('Hello') ‚Üí T = string
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏ä‡πà‡∏ô identity<number>('test') ‚ùå ‡∏à‡∏∞ Error

  // 2Ô∏è‚É£ any ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
  //     ‡πÑ‡∏°‡πà‡∏°‡∏µ Type Safety ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‚Üí ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Runtime

  // ‚ùå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á any ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  let data: any

  data = "Hello"
  console.log(data.toUpperCase()) // ‚úÖ 'HELLO'

  data = 100
  // console.log(data.toUpperCase()) // ‚ùå Runtime Error: data.toUpperCase is not a function

  // üìå ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢
  // data ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏≤‡∏à‡∏û‡∏±‡∏á‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á

  //   3Ô∏è‚É£ unknown ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
  // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô any
  // ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (typeof ‡∏´‡∏£‡∏∑‡∏≠ Type Guard) ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  // ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤ any ‚Üí ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Runtime

  // ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á unknown ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤ any
  let info: unknown

  info = "Hello"
  if (typeof info === "string") {
    console.log(info.toUpperCase()) // ‚úÖ 'HELLO'
  }

  info = 100
  if (typeof info === "number") {
    console.log(info.toFixed(2)) // ‚úÖ '100.00'
  }

  // üìå ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏ä‡πà‡∏ô data.toUpperCase() ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type ‡∏Å‡πà‡∏≠‡∏ô

  // üìå ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢:
  // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ typeof ‡∏´‡∏£‡∏∑‡∏≠ Type Guard ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
}
